# Read input
0o000 ğŸ˜ºğŸ˜¼ğŸ˜¿ğŸ™€ğŸ™€ Memory 7 through N+8 = input (N characters), newline, null

# Initialize variables
0o001 ğŸ˜»ğŸ˜¹ğŸ˜¸ğŸ™€ğŸ™€ğŸ˜¸ğŸ™€ğŸ™€ Memory 0 = 0 (n)
0o002 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ™€ğŸ˜¿ğŸ™€ğŸ™€ Memory 1 = 7 (input_ptr = address of input)

# Initialize constants
0o003 ğŸ˜»ğŸ˜¹ğŸ˜ºğŸ™€ğŸ™€ğŸ˜¾ğŸ˜¸ğŸ™€ğŸ™€ Memory 2 = 0o60 (48 = '0')
0o004 ğŸ˜»ğŸ˜¹ğŸ˜»ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜ºğŸ™€ğŸ™€ Memory 3 = 0o12 (10)
0o005 ğŸ˜»ğŸ˜¹ğŸ˜¼ğŸ™€ğŸ™€ğŸ˜¹ğŸ™€ğŸ™€ Memory 4 = 1

# Loop start: Get contents of input_ptr
0o006 ğŸ˜»ğŸ˜¹ğŸ˜½ğŸ™€ğŸ™€ğŸ˜¸ğŸ™€ğŸ™€ Memory 5 = 0
0o007 ğŸ˜¿ğŸ™€ğŸ˜¼ğŸ˜½ğŸ™€ğŸ™€ğŸ˜¹ğŸ™€ğŸ™€ Memory 5 += Memory 1 (input_ptr)
0o010 ğŸ˜¼ğŸ˜¾ğŸ˜½ğŸ™€ğŸ™€ Memory 5 = pointer(Memory 5) (digit)
0o011 ğŸ˜¿ğŸ™€ğŸ˜¸ğŸ˜¹ğŸ™€ğŸ™€ğŸ˜¼ğŸ™€ğŸ™€ Memory 1 += Memory 4 (increment input_ptr)

# Convert digit to number
0o012 ğŸ˜¿ğŸ™€ğŸ˜ºğŸ˜½ğŸ™€ğŸ™€ğŸ˜ºğŸ™€ğŸ™€ Memory 5 -= Memory 2 (value = char - '0')

# If invalid digit, exit loop_count
0o013 ğŸ˜»ğŸ˜¹ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ˜¿ Memory 6 = -0o11 (-9)
0o014 ğŸ˜¿ğŸ™€ğŸ˜¾ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜½ğŸ™€ğŸ™€ Memory 6 += Memory 5 (value - 9)
0o015 ğŸ˜½ğŸ˜¿ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜ºğŸ˜»ğŸ™€ğŸ™€ If Memory 6 > 0, jump to 0o24 (0o23 + 1) (if value > 9)
0o016 ğŸ˜»ğŸ˜¹ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜¸ğŸ™€ğŸ™€ Memory 6 = 0
0o017 ğŸ˜¿ğŸ™€ğŸ˜ºğŸ˜¾ğŸ™€ğŸ™€ğŸ˜½ğŸ™€ğŸ™€ Memory 6 -= Memory 5 (-value)
0o020 ğŸ˜½ğŸ˜¿ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜ºğŸ˜»ğŸ™€ğŸ™€ If Memory 6 > 0, jump to 0o24 (0o23 + 1) (if value < 0)

# n = n * 10 + value
0o021 ğŸ˜¿ğŸ™€ğŸ™€ğŸ˜¸ğŸ™€ğŸ™€ğŸ˜»ğŸ™€ğŸ™€ Memory 0 *= Memory 3 (n * 10)
0o022 ğŸ˜¿ğŸ™€ğŸ˜¸ğŸ˜¸ğŸ™€ğŸ™€ğŸ˜½ğŸ™€ğŸ™€ Memory 0 += Memory 5 (n * 10 + value)
0o023 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ˜¿ğŸ˜½ğŸ™€ğŸ™€ Jump to 6 (5 + 1) (Loop start)

# sieve = 0 (Memory 1)
0o024 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ™€ğŸ˜¸ğŸ™€ğŸ™€

# factor = 3 (Memory 2)
0o025 ğŸ˜»ğŸ˜¹ğŸ˜ºğŸ™€ğŸ™€ğŸ˜»ğŸ™€ğŸ™€

# factor_inc = 6 (Memory 4)
0o026 ğŸ˜»ğŸ˜¹ğŸ˜¼ğŸ™€ğŸ™€ğŸ˜¾ğŸ™€ğŸ™€

# factor_sq = 9 (0o11) (Memory 5)
0o027 ğŸ˜»ğŸ˜¹ğŸ˜½ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ™€

# factor_sq_inc = 16 (0o20) (Memory 6)
0o030 ğŸ˜»ğŸ˜¹ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜ºğŸ˜¸ğŸ™€ğŸ™€

# mask = 1 (Memory 7)
0o031 ğŸ˜»ğŸ˜¹ğŸ˜¿ğŸ™€ğŸ™€ğŸ˜¹ğŸ™€ğŸ™€

# start_mask = 8 (0o10) (Memory 8 [0o10])
0o032 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜¸ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜¸ğŸ™€ğŸ™€

# mask_multiplier = 8 (0o10) (Memory 9 [0o11])
0o033 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜¹ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜¸ğŸ™€ğŸ™€

# start_mask_multiplier = 256 (0o400) (Memory 10 [0o12])
0o034 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜ºğŸ™€ğŸ™€ğŸ˜¼ğŸ˜¸ğŸ˜¸ğŸ™€ğŸ™€

# two = 2 (Memory 11 [0o13])
0o035 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜»ğŸ™€ğŸ™€ğŸ˜ºğŸ™€ğŸ™€

# four = 4 (Memory 12 [0o14])
0o036 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜¼ğŸ™€ğŸ™€ğŸ˜¼ğŸ™€ğŸ™€

# eight = 8 (0o10) (Memory 13 [0o15])
0o037 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜½ğŸ™€ğŸ™€ğŸ˜¹ğŸ˜¸ğŸ™€ğŸ™€

# sixteen = 16 (0x20) (Memory 14 [0o16])
0o040 ğŸ˜»ğŸ˜¹ğŸ˜¹ğŸ˜¾ğŸ™€ğŸ™€ğŸ˜ºğŸ˜¸ğŸ™€ğŸ™€

outer:
    if factor_sq - n > 0, goto done

    temp = floor(sieve / mask)
    if temp - floor(temp / 2) * 2 > 0
        goto next_outer_factor

    k = factor_sq
    sieve_mask = start_mask
inner:
    if k - n > 0, goto next_factor

    temp = floor(sieve / sieve_mask)
    if temp - floor(temp / 2) * 2 > 0, goto next_inner_factor
    sieve += sieve_mask

next_inner_factor:
    k += factor_inc
    sieve_mask *= mask_multiplier
    goto inner

next_outer_factor:
    factor += 2
    factor_inc += 4
    factor_sq += factor_sq_inc
    factor_sq_inc += 8
    mask *= 2
    start_mask *= start_mask_multiplier
    mask_multiplier *= 4
    start_mask_multiplier *= 16
    goto outer

# done: output sieve as value and newline
0o041 ğŸ˜¼ğŸ˜¼ğŸ˜¹ğŸ™€ğŸ™€ Output Memory 1 as value
0o042 ğŸ˜½ğŸ˜¼ğŸ˜»ğŸ™€ğŸ™€ Output Memory 3 ("\n")
0o043 ğŸ™€ğŸ™€ Exit
