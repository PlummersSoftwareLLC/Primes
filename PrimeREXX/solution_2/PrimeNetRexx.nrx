/*
** NetRexx program to determine the prime numbers less than a number passed as a
** program parameter (sieveSize). The default sieveSize is 1,000,000
*/

class PrimeNetRexx public uses RexxTime
properties static public
	sqRt = int 
	iterations = int
    elapsedTime
	primes = boolean[]
	primesInit = boolean[]


method main(args = String[]) static
	a = args.length
	if a > 1 then
		do
			sieveSize = Rexx args[0]
			outputMode = Rexx args[1]
		end
	else if a = 1 then
		do
			sieveSize = args[0]
			outputMode = 0
		end
	else
		do
			sieveSize = 1000000
			outputMode = 0
		end
	test = (sieveSize.translate("           ","0123456789.")).space(0)
	if test \= "" then
		sieveSize = 1000000
	test = (outputMode.translate("          ","0123456789.")).space(0)
	if test \= "" then
		outputMode = 0
	if sieveSize = 0 | sieveSize = 1 | sieveSize = 2 | sieveSize = 3 then
	  do
		/* user did not supply the sieve size, use default 1,000,000 */
		outputMode = sieveSize
		sieveSize = 1000000
	  end
	/*
	** arrays start at 0, to bypass offsetting the entry for integer x by 1
	** inside the Sieve() method, allocate an array 1 entry larger than 
	** sieveSize. Then entry 0 represents 0, ...
	*/
	primesInit = boolean[sieveSize + 1]
	loop i = 0 to sieveSize
		primesInit[i] = 1
	end
	primes = boolean[sieveSize + 1]
	
	/*
	** Note:
	** o  The final iteration of the do while time("E") <= 5 loop may finish
	**    outside the 5 second mark. So perhaps the final count is too high by
	**    1 iteration, especially as the sieveSize gets larger.
	**
	*/
	sqRt = SquareRoot(sieveSize).trunc
	iterations = Sieve(sieveSize)

	/*
	** Sieve iterations are complete, print the results
	*/
	say "joss_NetRexx;"iterations";"elapsedtime";1;algorithm=base,bits=8,faithful=no"
	select
	  when outputMode = 1 then
		PrintDetail(sieveSize)
	  when outputMode = 2 then
		PrintSummary(sieveSize)
	  when outputMode = 3 then
		do
		  /* print summary last so you don't have to scroll to the top
		  ** of the detail output to see the summary
		  */
		  PrintDetail(sieveSize)
		  PrintSummary(sieveSize)
		end
	  otherwise
		nop
	end /* select*/
	exit 0


method Sieve(sieveSize) static
	/* 
	** start the timer. This is not interrupt driven so the outer loop will
	** always run at least one time. For sieveSize over 10,000,000 the loop will
	** run well over 5 seconds.
	*/
	time("R")
	iterations = 0
	loop while time("E") <= 5
		primes = primesInit
		loop i = 3 to SqRt by 2
			if primes[i] = 1 then
			do
				incr = i + i
				/*
				** Since i is a prime, all odd numbers up to
				** i^2 have been marked as composite, so start
				** marking the multiples of i starting at i^2.
				*/
				strt = i * i
				loop j = strt to sieveSize by incr
					primes[j] = 0
				end
			end
		end 
	  iterations = iterations + 1
	end
	/* capture the elapsed time of all iterations */
	elapsedTime = time("E") 
	return iterations


method PrintDetail(sieveSize) static
	printWidth	= int sieveSize.length() + 1
	line		= 2.right(printWidth)
	primesPerLine	= 1

	loop i = 3 to sieveSize by 2
	  if primes[i] then
	   do
		 line = line||i.right(printWidth," ")
		 primesPerLine = primesPerLine + 1
		 if primesPerLine = 20 then
		   do
			 say line
			 line = ""
			 primesPerLine = 0
		   end
	   end
	end i
	if primesPerLine > 0 then
	  say line
	return


method PrintSummary(sieveSize) static
	cnt			= int 1 /* accounts for 2 as prime */

	loop i = 3 to sieveSize by 2
	  if primes[i] then
		cnt = cnt + 1
	  select
		when i = 99 & i <= sieveSize then
		  say cnt" primes less than 100 (expected 25)"
		when i = 999 & i <= sieveSize then
		  say  cnt" primes less than 1,000 (expected 168)"
		when i = 9999 & i <= sieveSize then
		  say  Format(cnt)" primes less than 10,000 (expected 1,229)"
		when i = 99999 & i <= sieveSize then
		  say  Format(cnt)" primes less than 100,000 (expected 9,592)"
		when i = 999999 & i <= sieveSize then
		  say  Format(cnt)" primes less than 1,000,000 (expected 78,948)"
		when i = 9999999 & i <= sieveSize then
		  say Format(cnt)" primes less than 10,000,000 (expected 664,579)"
		when i = 99999999 & i <= sieveSize then
		  say Format(cnt)" primes less than 100,000,000 (expected 5,761,455)"
		when i = 999999999 & i <= sieveSize then
		  say Format(cnt)" primes less than 1,000,000,000 (expected 50,847,534)"
		when i = sieveSize | i = sieveSize - 1 then
		  say Format(cnt)" primes less than or equal to "format(sieveSize)
		otherwise
		  nop
	  end /* select */
	end i
	return


method SquareRoot(number) static
	guess = number / 2
	guess2 = 0.5 * (number / guess + guess)
	loop while (guess2 - guess).abs() > 0.0001
	  guess = guess2
	  guess2 = 0.5 * (number / guess + guess)
	end /* while */
	return guess2


method Format(num) static 
	temp1		= "abc,def,ghi,jkl,mno,pqr,stu,vwx"
	temp2		= "abcdefghijklmnopqrstuvwx"
	l			= num.length()
	l3			= (3 - (l//3)) // 3
	i			= num.right(l+l3)
	return temp1.translate(i,temp2).space(0).strip("T",",")
