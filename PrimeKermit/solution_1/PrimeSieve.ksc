### set start time ###
assign \%s \v(ntime)

### Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n). ###
dcl \&n[\%1]
for \%i 2 \%1 1 {
    assign \&n[\%i] \%i
}
def \%i 0

### Initially, let p equal 2, the smallest prime number. ###
def \%p 2

### Enumerate the multiples of p by counting in increments of p from 2p to n,
### and mark them in the list (these will be 2p, 3p, 4p, ...; the p itself should not be marked).###
:MARK
for \%i \Fevaluate(\%p*2) \%1 \%p {
    def \&n[\%i] 0    
}
def \%i 0

### Find the smallest number in the list greater than p that is not marked. If there was no such number, stop
### Otherwise, let p now equal this new number (which is the next prime), and repeat from step 3.###
for \%i \Fevaluate(\%p+1) \%1 1 {
    xif not = \&n[\%i] 0 {
        assign \%p \&n[\%i]
        goto MARK
    }
}
def \%i 0

### set final time ###
assign \%f \Fevaluate(\v(ntime)-\%s)

### print final array ###
echo q3w3e3;1;\%f;1;algorithm=base,faithful=no

exit
